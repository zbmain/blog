<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>我的公众号</title>
    <url>/2016/12/20/%E6%88%91%E7%9A%84%E5%85%AC%E4%BC%97%E5%8F%B7/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/zbmain/imgchr@master/imgs/20210301132152.jpg"></p>
]]></content>
  </entry>
  <entry>
    <title>Linux中使用matplotlib库报错问题</title>
    <url>/2020/09/30/%E6%9C%8D%E5%8A%A1%E5%99%A8plt%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h1 id="Linux服务器中python使用matplotlib库报错："><a href="#Linux服务器中python使用matplotlib库报错：" class="headerlink" title="Linux服务器中python使用matplotlib库报错："></a>Linux服务器中python使用matplotlib库报错：</h1><h2 id="CXXABI-1-3-9-解决方案："><a href="#CXXABI-1-3-9-解决方案：" class="headerlink" title="CXXABI_1.3.9 解决方案："></a>CXXABI_1.3.9 解决方案：</h2><ul>
<li><p>1.更新系统中的 libstdc++ 为connda中的版本（修改对应自己anaconda中版本文件）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 按顺序执行(含义自行解读)</span><br><span class="line">sudo cp &#x2F;root&#x2F;anaconda3&#x2F;lib&#x2F;libstdc++.so.6.0.26 &#x2F;usr&#x2F;lib64&#x2F;</span><br><span class="line">sudo mv &#x2F;usr&#x2F;lib64&#x2F;libstdc++.so.6 &#x2F;usr&#x2F;lib64&#x2F;libstdc++.so.6_backup</span><br><span class="line">sudo ln -s &#x2F;root&#x2F;anaconda3&#x2F;lib&#x2F;libstdc++.so.6.0.26 &#x2F;usr&#x2F;lib64&#x2F;libstdc++.so.6</span><br></pre></td></tr></table></figure>
<ul>
<li><p>2.之后就可以画图了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import matplotlib.pyplot</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Hello hexo</title>
    <url>/2016/05/08/%E5%90%8E%E7%AB%AF/Hello%20hexo/</url>
    <content><![CDATA[<p><br><br><br><br><br><br><br></p>
<center><font face="黑体" size=18>hexo & pages</font><center>
<br><br><br><br><br><br><br>
]]></content>
  </entry>
  <entry>
    <title>月租十美元服务器:6核 16G 320GB固态（可重复租）</title>
    <url>/2020/12/20/%E5%90%8E%E7%AB%AF/Vultr%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<h1 id="十美元重复租用-Vultr-CPU-VPS-gt-gt-AI学习"><a href="#十美元重复租用-Vultr-CPU-VPS-gt-gt-AI学习" class="headerlink" title="十美元重复租用 Vultr CPU VPS &gt;&gt; AI学习"></a><font color=red face="微软雅黑">十美元重复租用 Vultr CPU VPS &gt;&gt; AI学习</font></h1><h2 id="1-注册账户"><a href="#1-注册账户" class="headerlink" title="1.注册账户"></a>1.注册账户</h2><ul>
<li>注册Vultr账户：<ul>
<li><del>不要直接去官网vultr.com注册。</del></li>
<li>通过活动链接（<a href="https://www.baidu.com/s?wd=Vultr">新用户注册送$100</a>）注册账户。</li>
<li>关于$100<ul>
<li>注册后，在【Billing】右侧看到有$100/月活动券，说明注册成功。</li>
<li>通过【Alipay】支付宝充值$10，激活$100（充值填写的资料随意填，但不要过假）</li>
<li>正常充值后，$100便激活成功，有效期30天，账户消费优先扣除$100。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="2-创建实例"><a href="#2-创建实例" class="headerlink" title="2.创建实例"></a>2.创建实例</h2><ul>
<li>在【Products】中，通过【+】 创建服务器实例。</li>
<li>我的最佳配置方案：（选择消费最接近$100/月的配置）<ul>
<li>类型：<font color='green'>Cloud Compute</font> 计算型</li>
<li>地区：<font color='green'>日本</font> &gt; <font color='green'>新加坡</font> &gt; <font color='green'>韩国</font>（Asia地理位置近，SSH延迟低）</li>
<li>系统：<font color='green'>CentOS 7 x64</font></li>
<li>配置：<font color='green'>$80/mo</font>：320GB 6CPU 16GB 5TB（此实例是$80/月/个）</li>
</ul>
</li>
<li>等待server installing 完毕，点击实例就有IP、密码就可以登录了。</li>
<li><del>如果出现SSH无法连接，可以检测下IP是否被污染墙外。如果是，可换个地区重新创建实例。</del></li>
</ul>
<h2 id="3-安装环境"><a href="#3-安装环境" class="headerlink" title="3.安装环境"></a>3.安装环境</h2><ul>
<li><p>服务器当前是Vultr CentOS裸系统，根据个人需求安装环境：</p>
<ul>
<li><p>关于我的Shell脚本（支持一键安装Python-AI集成开发环境）：</p>
<ul>
<li><p>一键安装、卸载：Python3.7.4、Anaconda3、Python-AI集成环境（仅包含<a href="https://zbmain.com/files/env/ai.yaml">AI领域常用库</a>）</p>
</li>
<li><p>命令：<code>wget http://zbmain.com/files/env/zblinux.sh &amp;&amp; bash zblinux.sh</code></p>
</li>
<li><p>注意：</p>
<ul>
<li>创建Python-AI集成环境，需要先安装：Python3.7.4 和 Anaconda3。</li>
<li>个人服务器放心使用脚本，共有服务器注意安装Python3.7.4脚本时yum安装了以下库包：<ul>
<li><font color='LightSlateGray'>gcc gcc-c++ kernel-devel make zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel libffi-devel</font></li>
<li><img src="https://cdn.jsdelivr.net/gh/zbmain/imgchr@master/imgs/20210314174427.png"></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p><font color=red>到此，服务器环境已经可以正常使用。</font></p>
</li>
</ul>
</li>
</ul>
<h2 id="4-心得经验"><a href="#4-心得经验" class="headerlink" title="4.心得经验"></a>4.心得经验</h2><ul>
<li>$100有效期，从激活日开始算+30day。</li>
<li>可以创建多个实例，实例按小时扣费，空闲实例及时【Destroy】释放停止扣费，【Stop】也会扣费。</li>
<li>新用户赠送实名制根据支付宝判定，若想重复使用，关键取决于你有多少支付宝。<ul>
<li>重复使用，需要：注册新账户+新支付宝充值，所以关于Vultr支持ISO镜像备份问题：<ul>
<li>需注册新账户，快照操作不适用。</li>
<li>ISO文件大，不如一键命令快。若必需，可自行尝试ISO。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="5-作者声明"><a href="#5-作者声明" class="headerlink" title="5.作者声明"></a>5.作者声明</h2><ul>
<li>境外服务器仅供学习使用，不做污染IP池等其他一切不当行为。</li>
<li>当事人的一切个人行为与本站无关。</li>
</ul>
]]></content>
      <tags>
        <tag>vultr</tag>
      </tags>
  </entry>
  <entry>
    <title>创建个人huggingface远程仓库</title>
    <url>/2020/10/08/%E5%90%8E%E7%AB%AF/%E5%85%B3%E4%BA%8Ehuggingface%E4%BB%93%E5%BA%93/</url>
    <content><![CDATA[<h1 id="创建个人huggingface远程仓库"><a href="#创建个人huggingface远程仓库" class="headerlink" title="创建个人huggingface远程仓库"></a>创建个人huggingface远程仓库</h1><h1 id="模型上传"><a href="#模型上传" class="headerlink" title="模型上传"></a>模型上传</h1><h2 id="1-transformers-cli-接口方式"><a href="#1-transformers-cli-接口方式" class="headerlink" title="1.transformers-cli 接口方式"></a>1.transformers-cli 接口方式</h2>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">transformers-cli upload .&#x2F;test&#x2F;</span><br></pre></td></tr></table></figure>

<ul>
<li>transformers-cli调用了python-transformers库中上传接口方法<ul>
<li>分析失败原因（猜测）：<ul>
<li><del>接口bug（transformers2.3.0中的上传接口可能变更）</del></li>
<li><del>网络问题：huggingface.co/api 服务器接口除加拿大本地区，访问丢包延迟超高。</del></li>
<li>…</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="2-使用官方推荐：git方式"><a href="#2-使用官方推荐：git方式" class="headerlink" title="2.使用官方推荐：git方式"></a>2.使用官方推荐：git方式</h2><ul>
<li><p>1.创建远程仓库。v2.3.0没有repo命令，要么升级版本，要么手动去huggingface.co创建一个仓库。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">transformers-cli repo create test</span><br></pre></td></tr></table></figure>
</li>
<li><p>2.远程仓库克隆到本地。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;huggingface.co&#x2F;zbmain&#x2F;test</span><br></pre></td></tr></table></figure>
</li>
<li><p>3.将自己的文件拷贝到 test 目录。</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">拷贝文件到项目中</span><br></pre></td></tr></table></figure>
</li>
<li><p>4.进入项目中，创建一个md文档，创不创建随意。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd test</span><br><span class="line">echo &quot;test&quot; &gt;&gt; README.md</span><br></pre></td></tr></table></figure>
</li>
<li><p>5.添加所有更改文件到缓存区，并提交到本地git版本库。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add . &amp;&amp; git commit -m &quot;update test&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>6.将本地版本库push到远程仓库。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h1 id="加载个人模型"><a href="#加载个人模型" class="headerlink" title="加载个人模型"></a>加载个人模型</h1><ul>
<li><p>推荐使用torch.hub.load() 方法：<!--因为shell脚本运行的py文件是torch训练生成的模型--></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># source，part，model参数</span><br><span class="line">tokenizer &#x3D; torch.hub.load()</span><br><span class="line">model &#x3D; torch.hub.load()</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用huggingface.co 推荐transformers-api： (需升级transformers)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># api会读取config.json适配，参数少</span><br><span class="line">from transformers import AutoTokenizer, AutoModelForMaskedLM</span><br><span class="line">tokenizer &#x3D; AutoTokenizer.from_pretrained(&quot;zbmain&#x2F;test&quot;)</span><br><span class="line">model &#x3D; AutoModelForMaskedLM.from_pretrained(&quot;zbmain&#x2F;test&quot;)</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h1 id="发现问题"><a href="#发现问题" class="headerlink" title="发现问题"></a>发现问题</h1><ul>
<li>服务器上git push到transformers.cc，上载150KB/S,存在问题，VPN到美国/加拿大节点，可以达到1M/S。</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Typora + PicGo + Github + Jsdelivr 生成Md图床</title>
    <url>/2021/01/02/%E5%B7%A5%E5%85%B7/Typora-PicGo-Github-Jsdelivr%E7%94%9F%E6%88%90Markdown%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<h2 id="图床制作："><a href="#图床制作：" class="headerlink" title="图床制作："></a>图床制作：</h2><ul>
<li>Typora Markdown编辑器<ul>
<li>设置-图像-上传服务设置中，选择PicGo</li>
</ul>
</li>
</ul>
<ul>
<li>PicGo图床工具<ul>
<li>选择Github图床（免费）<ul>
<li>七牛等需要备案的域名</li>
<li>COS，OSS，S3等需要收费（个人使用低廉）</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li>Github图床服务站<ul>
<li>创建仓库</li>
<li>个人设置中生成repo-Token(PicGo设置Github图床需要此Token)</li>
</ul>
</li>
</ul>
<ul>
<li>Jsdelivr作为Github的CDN加速<ul>
<li>在PicGo中填写Github图床站点链接格式（最好使用CDN链接）：<ul>
<li>Github默认：<code>https://raw.githubusercontent.com/[用户名]/[仓库]/[分支]</code></li>
<li>CDN链接：<code>https://cdn.jsdelivr.net/gh/[用户名]/[仓库]@[分支]</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="经验心得："><a href="#经验心得：" class="headerlink" title="经验心得："></a>经验心得：</h2><ul>
<li><p>设置操作比较简单，百度有更详细的教程。</p>
</li>
<li><p>为Github设置Pages，在PicGo中链接使用Pages的自定义域名后，虽然资源可以访问到，但是PicGo中失效，需要重启Typora才可以更新初图片，所以最佳链接地址使用cdn.jsdelivr.net的链接。</p>
</li>
<li><p>也可以随意上传其他文件，就可以直接得到外网访问链接了。</p>
</li>
</ul>
<p>创建好图床配置成功之后，Typora中插入图片时，图片地址可以自动转换为外部链接。</p>
]]></content>
      <tags>
        <tag>imgchr</tag>
      </tags>
  </entry>
  <entry>
    <title>常用工具库</title>
    <url>/2019/11/28/%E5%B7%A5%E5%85%B7/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E5%BA%93/</url>
    <content><![CDATA[<h1 id="常用工具库"><a href="#常用工具库" class="headerlink" title="常用工具库"></a>常用工具库</h1><ul>
<li>域名、顶级域名提取<ul>
<li><a href="https://github.com/john-kurkowski/tldextract">https://github.com/john-kurkowski/tldextract</a></li>
<li><a href="https://github.com/barseghyanartur/tld">https://github.com/barseghyanartur/tld</a></li>
</ul>
</li>
<li></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>常用正则式</title>
    <url>/2019/11/25/%E5%B7%A5%E5%85%B7/%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E5%BC%8F/</url>
    <content><![CDATA[<ul>
<li><p>邮箱</p>
<ul>
<li><code>^w+([-+.]w+)*@w+([-.]w+)*.w+([-.]w+)*$</code></li>
</ul>
</li>
<li><p>手机</p>
<ul>
<li><code>((\+86|86)?1[358][0-9]&#123;9&#125;)&#39;)</code></li>
<li><code>1[3-9]\d&#123;9&#125;)</code></li>
</ul>
</li>
<li><p>身份证</p>
<ul>
<li><code>^[1-9]\\d&#123;5&#125;[1-9]\\d&#123;3&#125;((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d&#123;3&#125;([0-9]|X)$</code></li>
</ul>
</li>
<li><p>国内电话（3+8 |4+7）</p>
<ul>
<li><code>d&#123;3&#125;-d&#123;8&#125;|d&#123;4&#125;-d&#123;7&#125;</code></li>
</ul>
</li>
<li><p>HTTP链接</p>
<ul>
<li><code>(http://|https://)[a-zA-Z0-9]+[a-zA-Z0-9-/?.]+</code></li>
<li><code>[a-zA-z]+://[^s]*</code></li>
<li><code>^http://([w-]+.)+[w-]+(/[w-./?%&amp;=]*)?$</code></li>
</ul>
</li>
<li><p>HTTP域名</p>
<ul>
<li><code>https?://(?:[-\w.]|(?:%[\da-fA-F]&#123;2&#125;))+</code></li>
</ul>
</li>
<li><p>E-mail</p>
<ul>
<li><code>^w+([-+.]w+)*@w+([-.]w+)*.w+([-.]w+)*$</code></li>
</ul>
</li>
<li><p>QQ</p>
<ul>
<li><code>[1-9][0-9]&#123;4,&#125;</code></li>
</ul>
</li>
<li><p>XML</p>
<ul>
<li><code>^([a-zA-Z]+-?)+[a-zA-Z0-9]+\.[x|X][m|M][l|L]$</code></li>
</ul>
</li>
<li><p>IP</p>
<ul>
<li><code>((?:(?:25[0-5]|2[0-4]\d|[01]?\d?\d)\.)&#123;3&#125;(?:25[0-5]|2[0-4]\d|[01]?\d?\d))</code></li>
</ul>
</li>
<li><p>邮编</p>
<ul>
<li><code>[1-9]d&#123;5&#125;(?!d)</code></li>
</ul>
</li>
<li><p>金额校正</p>
<ul>
<li><code>^(?:(?!0000)[0-9]&#123;4&#125;-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[0-9]&#123;2&#125;(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)-02-29)$</code></li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>正则</tag>
        <tag>regular</tag>
        <tag>re</tag>
      </tags>
  </entry>
  <entry>
    <title>科学上网</title>
    <url>/2019/12/01/%E5%B7%A5%E5%85%B7/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</url>
    <content><![CDATA[<h2 id="上网工具："><a href="#上网工具：" class="headerlink" title="上网工具："></a>上网工具：</h2><ul>
<li>浏览器扩展插件（只能代理浏览器HTTP）：<ul>
<li>集装箱<ul>
<li>功能：<ul>
<li>免费VPN，作者设置代理了Google搜索、Store、学术等，支持自定义Rule。</li>
<li>百度网盘直链下载。</li>
<li>Aria2UI界面。</li>
<li>安装：<a href="https://a.newday.me/?scene=index_index_index">工具官网</a></li>
<li><font color="red">自定义Rule，即可以自定义添加规则域名。</font></li>
</ul>
</li>
</ul>
</li>
<li>谷歌iGG<ul>
<li>功能：永久免费提供谷歌搜索，gmail，Chrome Store,Android/Golang等谷歌产品加速访问。支持大部分谷歌二级域名。傻瓜式一键操作。</li>
<li>安装：<a href="https://iguge.app/">CRX包链接</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<br>

<ul>
<li><p>应用APP（可代理Socket）：</p>
<ul>
<li><p>小飞机</p>
<ul>
<li><p>介绍：代理工具，它只是工具软件，实现科学上网还需要配置节点。</p>
</li>
<li><p>下载：</p>
<ul>
<li><a href="https://github.com/shadowsocks/shadowsocks-windows/releases">Windows</a></li>
<li><a href="https://github.com/shadowsocks/ShadowsocksX-NG/releases">MacOS</a></li>
</ul>
</li>
<li><p>免费节点：</p>
<ul>
<li><a href="https://ssrtool.us/">时效长</a></li>
<li><a href="https://lncn.org/">时效短</a></li>
</ul>
</li>
</ul>
</li>
<li><p>V2ray</p>
<ul>
<li>介绍：与小飞机（SSR）类似，V2ray加密更好。</li>
<li>百度、github查找下载。</li>
<li>免费节点：小飞机里的免费节点也有V2ray类型的。</li>
</ul>
</li>
</ul>
</li>
</ul>
<br>

<h2 id="心得建议："><a href="#心得建议：" class="headerlink" title="心得建议："></a>心得建议：</h2><ul>
<li><p>只需浏览器代理HTTP上网，直接安装浏览器插件：iGG、集装箱即可，不需找节点配置。</p>
</li>
<li><p>如果要代理Socket，那只能安装SSR小飞机、V2ray。</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>我的分享笔记</title>
    <url>/2020/10/10/%E6%97%A5%E8%AE%B0/%E6%88%91%E7%9A%84%E5%88%86%E4%BA%AB%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="我的分享笔记"><a href="#我的分享笔记" class="headerlink" title="我的分享笔记"></a>我的分享笔记</h2><br>

<ul>
<li><a href="https://www.yuque.com/books/share/f63180be-3e1c-481c-92d9-75cccb03b026/lkvdoh">语雀笔记分享</a><br><br><br></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Pycharm破解 无限重置试用</title>
    <url>/2021/03/01/%E8%BD%AF%E4%BB%B6/Pycharm%E7%A0%B4%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="Pycharm-Eval-resetter-Crack"><a href="#Pycharm-Eval-resetter-Crack" class="headerlink" title="Pycharm Eval-resetter Crack"></a>Pycharm Eval-resetter Crack</h2><h2 id="此方法不区分操作系统（MacOS-amp-Windows）"><a href="#此方法不区分操作系统（MacOS-amp-Windows）" class="headerlink" title="此方法不区分操作系统（MacOS &amp; Windows）"></a>此方法不区分操作系统（MacOS &amp; Windows）</h2><h2 id="实现过程："><a href="#实现过程：" class="headerlink" title="实现过程："></a>实现过程：</h2><ul>
<li><p>下载重置文件：<a href="https://cdn.jsdelivr.net/gh/zbmain/zbmain.github.io@main/files/software/pycharm/ide-eval-resetter-2.1.9.zip">[点击下载重置文件]</a></p>
</li>
<li><p>启动Pycharm，选择免费30天试用。</p>
</li>
<li><p>拖动破解文件.zip文件到Pycharm界面中，根据提示按钮reset，重启Pycharm。</p>
</li>
<li><p>Pycharm重启之后，选择 【帮助 - 试用】，即可看到剩余试用天数。</p>
</li>
<li><p>待试用天数减小之后，选择【帮助 - Eval Reset】，点击【Reload】&amp;【Reset】，实现重置试用为30天。</p>
</li>
<li><p>选中下图【Auto reset before pre reset】实现自动重置，即可不用手动再操作。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbmain/imgchr@master/imgs/20210303094344.png"></p>
</li>
</ul>
]]></content>
  </entry>
</search>
